// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc2619.BasketballBot2016;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import org.usfirst.frc2619.BasketballBot2016.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton aimLeftBTN;
    public JoystickButton aimRightBTN;
    public Joystick leftJoystick;
    public JoystickButton pickUpBTN;
    public JoystickButton spitOutBTN;
    public JoystickButton shooterMotorBTN;
    public JoystickButton shootBTN;
    public JoystickButton teeterTotterArmDownBTN;
    public JoystickButton teeterTotterArmUpBTN;
    public Joystick rightJoystick;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        rightJoystick = new Joystick(2);
        
        teeterTotterArmUpBTN = new JoystickButton(rightJoystick, 5);
        teeterTotterArmUpBTN.whileHeld(new UpTeeterTotterArm());
        teeterTotterArmDownBTN = new JoystickButton(rightJoystick, 3);
        teeterTotterArmDownBTN.whileHeld(new DownTeeterTotterArm());
        shootBTN = new JoystickButton(rightJoystick, 1);
        shootBTN.whileHeld(new FeedShooter());
        shooterMotorBTN = new JoystickButton(rightJoystick, 2);
        shooterMotorBTN.whileHeld(new RunShooter());
        spitOutBTN = new JoystickButton(rightJoystick, 4);
        spitOutBTN.whileHeld(new SpitOutCD());
        pickUpBTN = new JoystickButton(rightJoystick, 6);
        pickUpBTN.whileHeld(new PickUpCD());
        leftJoystick = new Joystick(1);
        
        aimRightBTN = new JoystickButton(leftJoystick, 4);
        aimRightBTN.whileHeld(new AimRight());
        aimLeftBTN = new JoystickButton(leftJoystick, 3);
        aimLeftBTN.whileHeld(new AimLeft());
	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("PickUpCD", new PickUpCD());
        SmartDashboard.putData("SpitOutCD", new SpitOutCD());
        SmartDashboard.putData("RunShooter", new RunShooter());
        SmartDashboard.putData("FeedShooter", new FeedShooter());
        SmartDashboard.putData("AimLeft", new AimLeft());
        SmartDashboard.putData("AimRight", new AimRight());
        SmartDashboard.putData("DownTeeterTotterArm", new DownTeeterTotterArm());
        SmartDashboard.putData("UpTeeterTotterArm", new UpTeeterTotterArm());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getLeftJoystick() {
        return leftJoystick;
    }
    public Joystick getRightJoystick() {
        return rightJoystick;
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}
